(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,t,a){e.exports=a(22)},21:function(e,t,a){},22:function(e,t,a){"use strict";a.r(t);var r=a(0),n=a.n(r),i=a(11),o=a.n(i),s=a(3),c=a(4),l=a(6),h=a(5),m=a(7),p=a(2),u=a(12),f=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(h.a)(t).call(this,e))).handleChange=function(e){var t=e.target,r=t.name,n=t.value;a.setState(Object(u.a)({},r,n))},a.onFormSubmit=function(e){e.preventDefault(),a.props.handleSearch(a.state.searchText)},a.initialState={searchText:""},a.state=a.initialState,a}return Object(m.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.state.searchText;return n.a.createElement("form",{onSubmit:this.onFormSubmit,className:"rowC"},n.a.createElement("input",{type:"text",name:"searchText",value:e,placeholder:"Search repositories by organization, e.g. Netflix",onChange:this.handleChange}),n.a.createElement("button",{type:"submit"},"Search"))}}]),t}(r.Component),d=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(h.a)(t).call(this,e))).state={org:"",repos:[],error:!1},a.mockData={org:"Netflix",repos:[{id:"123",name:"Hystrix",forks_count:"100"},{id:"124",name:"Asgard",forks_count:"50"}]},a.handleErrors=a.handleErrors.bind(Object(p.a)(Object(p.a)(a))),a}return Object(m.a)(t,e),Object(c.a)(t,[{key:"handleErrors",value:function(e){if(!e.ok)throw this.setState({org:"",repos:[],error:!0}),this.props.updateCommitView(""),Error(e.statusText);return e}},{key:"componentDidUpdate",value:function(e){var t=this;if(this.props.org!==e.org&&this.props.org)if(this.props.org){console.log("Load repos...");var a=this.props.org;fetch("https://api.github.com/orgs/"+a+"/repos").then(this.handleErrors).then(function(e){return e.json()}).catch(function(e){console.log(e)}).then(function(e){t.setState({org:a,repos:e})})}else this.setState(this.initialState)}},{key:"handleClick",value:function(e){this.props.updateCommitView(e)}},{key:"render",value:function(){var e=this,t=this.state,a=t.repos,r=t.error;if(a&&a.length>0){var i=a.sort(function(e,t){return t.forks_count-e.forks_count}).map(function(t,a){return n.a.createElement("li",{key:t.id,onClick:function(a){return e.handleClick(t.name,a)}},n.a.createElement("a",{href:"#"},t.name))});return n.a.createElement("div",null,n.a.createElement("h2",null,"Repositories"),n.a.createElement("ul",null,i))}return r?n.a.createElement("div",null,n.a.createElement("h2",null,"No repositories were found for this organization")):null}}]),t}(r.Component),g=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(h.a)(t).call(this,e))).initialState={org:"",repoName:"",repoCommits:[]},a.state=a.initialState,a.mockData={repoCommits:[{sha:"648102625a4b6d2c3669b7837c2a5768c20b16a3",commit:{message:"Update OSSMETADATA\n\nAsgard is unused at Netflix"}},{sha:"825ff569410dd063755873a37326513f807f914b",commit:{message:"Merge pull request #723 from zanthrash/fix_fp_cache\n\nremoves Fast Property caching so app can start up."}}]},a}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentDidUpdate",value:function(e){var t=this;if(this.props.repoName!==e.repoName)if(this.props.repoName){console.log("Load commits...");var a=this.props,r=a.org,n=a.repoName;fetch("https://api.github.com/repos/"+r+"/"+n+"/commits").then(function(e){return e.json()}).then(function(e){t.setState({repoCommits:e})})}else this.setState(this.initialState)}},{key:"handleClick",value:function(e,t){this.props.updateDiffView(t.sha)}},{key:"render",value:function(){var e=this,t=this.state.repoCommits;if(t&&t.length>0){var a=t.map(function(t,a){return n.a.createElement("li",{key:a,onClick:function(a){return e.handleClick(a,t)}},t.commit.message)});return n.a.createElement("div",null,n.a.createElement("h3",null,"Commits"),n.a.createElement("ul",null,a))}return null}}]),t}(r.Component),v=a(8),S=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(h.a)(t).call(this,e))).initialState={diffText:"",commitSha:""},a.state=a.initialState,a.mockData={commitSha:"825ff569410dd063755873a37326513f807f914b",diffText:'diff --git a/grails-app/services/com/netflix/asgard/FastPropertyService.groovy b/grails-app/services/com/netflix/asgard/FastPropertyService.groovy\nindex 9ca9fb81..0bc85ac3 100644\n--- a/grails-app/services/com/netflix/asgard/FastPropertyService.groovy\n+++ b/grails-app/services/com/netflix/asgard/FastPropertyService.groovy\n@@ -57,7 +57,12 @@ class FastPropertyService implements CacheInitializer {\n                     FastProperty.fromXml(fastPropertyData)\n                 }\n             } else {\n-                throw new ServerException("Failure to fetch fast property list from $/{url}")\n+                // throw new ServerException("Failure to fetch fast property list from $/{url}")\n+                // This API call no longer works and prevents the app from starting up properly.\n+                // CRUD operations for fast pproperties are not used so we are just going to log the error and return an\n+                // empty list to the cache.\n+                log.warn("Failure to fetch fast property list from $/{url}")\n+                return []\n             }\n         }\n         []\n@@ -255,6 +260,6 @@ class FastPropertyService implements CacheInitializer {\n     private String platformServiceHostAndPort(UserContext userContext) {\n         String host = configService.getRegionalPlatformServiceServer(userContext.region)\n         String port = configService.platformServicePort\n-        (configService.online && host && port) ? "$/{host}:$/{port}" : null\n+        ((configService.online || true) && host && port) ? "$/{host}:$/{port}" : null\n     }\n }\n'},a}return Object(m.a)(t,e),Object(c.a)(t,[{key:"componentDidUpdate",value:function(e){var t=this;if(this.props.commitSha!==e.commitSha)if(this.props.commitSha){console.log("Load diff...");var a=this.props,r=a.org,n=a.repoName,i=a.commitSha;fetch("https://api.github.com/repos/"+r+"/"+n+"/commits/"+i,{headers:{Accept:"application/vnd.github.VERSION.diff"}}).then(function(e){e.text().then(function(e){t.setState({commitSha:i,diffText:e})})})}else this.setState(this.initialState)}},{key:"render",value:function(){var e=this.state,t=e.diffText,a=e.commitSha;if(t&&a){var r=Object(v.d)(t);return n.a.createElement("div",null,n.a.createElement("h4",null,"Diff"),r.map(function(e){var t=e.oldRevision,a=e.newRevision,r=e.type,i=e.hunks;return n.a.createElement(v.b,{key:t+"-"+a,viewType:"split",diffType:r,hunks:i},function(e){return e.map(function(e){return n.a.createElement(v.a,{key:"decoration-"+e.content},e.content),n.a.createElement(v.c,{key:e.content,hunk:e})})})}))}return null}}]),t}(r.Component),b=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(h.a)(t).call(this,e))).initialState={org:"",repoName:"",commitSha:""},a.state=a.initialState,a.handleSearch=a.handleSearch.bind(Object(p.a)(Object(p.a)(a))),a.handleCommitViewUpdate=a.handleCommitViewUpdate.bind(Object(p.a)(Object(p.a)(a))),a.handleDiffViewUpdate=a.handleDiffViewUpdate.bind(Object(p.a)(Object(p.a)(a))),a}return Object(m.a)(t,e),Object(c.a)(t,[{key:"handleSearch",value:function(e){this.setState({org:e,repoName:"",commitSha:""})}},{key:"handleCommitViewUpdate",value:function(e){this.setState({org:this.state.org,repoName:e,commitSha:""})}},{key:"handleDiffViewUpdate",value:function(e){this.setState({org:this.state.org,repoName:this.state.repoName,commitSha:e})}},{key:"render",value:function(){var e=this.state,t=e.org,a=e.repoName,r=e.commitSha;return n.a.createElement("div",null,n.a.createElement(f,{handleSearch:this.handleSearch}),n.a.createElement("div",{className:"rowC"},n.a.createElement(d,{org:t,updateCommitView:this.handleCommitViewUpdate}),n.a.createElement(g,{org:t,repoName:a,updateDiffView:this.handleDiffViewUpdate}),n.a.createElement(S,{org:t,repoName:a,commitSha:r})))}}]),t}(r.Component);a(21);o.a.render(n.a.createElement(b,null),document.getElementById("root"))}},[[13,1,2]]]);
//# sourceMappingURL=main.181bb894.chunk.js.map